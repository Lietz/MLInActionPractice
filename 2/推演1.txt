
x=([x1,y1])
#diffMat=tile(inX,(dataSetSize,1))-dataSet



#可使用双重序列来表示二维的数组，三重序列表示三维数组，以此类推。
#[python] view plain copy
#>>> b = array( [ (1.5,2,3), (4,5,6) ] )　　  
#>>> b  
#    array([[ 1.5,  2. ,  3. ],  
#　　　     [ 4. ,  5. ,  6. ]])  

tile(inX,(dataSetSize,1))=([x1,y1],   dataset=([a1,b1],
                           [x1,y1],            [a2,b2],
                           [x1,y1],            [a3,b3],
                           [x1,y1])            [a4,b4])



diffMat
=tile(inX,(dataSetSize,1))-dataSet
=([x1-a1,y1-b1],
  [x1-a2,y1-b2],
  [x1-a3,y1-b3],
  [x1-a4,y1-b4])

sqDiffMat=diffMat^2
=([(x1-a1)^2,(y1-b1)^2],
  [(x1-a2)^2,(y1-b2)^2],
  [(x1-a3)^2,(y1-b3)^2],
  [(x1-a4)^2,(y1-b4)^2])

sqDistances
=sqDiffMat.sum(axis=1)
=([(x1-a1)^2+(y1-b1)^2,
  (x1-a2)^2+(y1-b2)^2,
  (x1-a3)^2+(y1-b3)^2,
  (x1-a4)^2+(y1-b4)^2])

distances=sqDistances^0.5
=([(x1-a1)^2+(y1-b1)^2]^0.5,
  [(x1-a2)^2+(y1-b2)^2]^0.5,
  [(x1-a3)^2+(y1-b3)^2]^0.5,
  [(x1-a4)^2+(y1-b4)^2]^0.5)

==(d1,
   d2,
   d3,
   d4)


#>>> x = np.array([3, 1, 2])
#>>> np.argsort(x) #按升序排列
#->1,2,3
#->1的索引是1,2的索引是2,3的索引是0，
#array([1, 2, 0])

如果distances=([10,60,20,80])
sortedDistIndices=([0,2,1,3])

labels=['A','A',''B','B']
如果k=2
classCount={}    #是一个dict-> ['key':value]
for i in range (k):
    voteIlabel=labels[sortedDistIndicies[i]]
    classCount[voteIlabel]=classCount.get(voteIlabel,0)+1   #classCount.get(key,key不存在时默认返回值）

{i=0:
 voteIlabel='A'<-labels[0]<-sortedDistIndicies[0]
 classCount['A']=1<-classCount.get(A,0)+1}
{i=1:
 voteIlabel='B'<-labels[2]<-sortedDistIndicies[1]
 classCount['B']=1<-classCount.get(B,0)+1}
{i=2:
 voteIlabel='A'<-labels[1]<-sortedDistIndicies[2]
 classCount['A']=2<-classCount.get(A,0)+1}
          

sortedClassCount=sorted(classCount.iteritems(),key=operator.itemgetter(1),reverse=True)
#sorted创建副本对list和iterable按key（这里是元组的第二个元素）进行排序,可对字典返回有tuple组成的list
#itemgetter获取对象第（序号）维的数据
#iteritems()返回迭代器对象

 